name: Continuous Delivery
on:
  push:
    tags: ['*']
jobs:
  Debian:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v2-beta # use either @v2-beta or @master. Eventually there will be a @v2 tag.

      - name: Setup Makedeb
        run: |
            wget -qO - 'https://proget.hunterwittenborn.com/debian-feeds/makedeb.pub' | \
            gpg --dearmor | \
            sudo tee /usr/share/keyrings/makedeb-archive-keyring.gpg &> /dev/null
            echo 'deb [signed-by=/usr/share/keyrings/makedeb-archive-keyring.gpg arch=all] https://proget.hunterwittenborn.com/ makedeb main' | \
            sudo tee /etc/apt/sources.list.d/makedeb.list

      - name: Install Dependencies
        run: |
          sudo apt update -y
          sudo apt upgrade -y
          sudo apt install build-essential cmake libsdl2-dev libglew-dev libglm-dev -y
          chmod +x github-scripts/debian.sh

      - id: get_version
        uses: battila7/get-version-action@v2

      - name: Package
        run: |
          github-scripts/debian.sh package ${{ steps.get_version.outputs.version }}

      - uses: actions/upload-artifact@v2
        with:
          name: debian-artifact
          path: pkg/

  Arch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v2-beta # use either @v2-beta or @master. Eventually there will be a @v2 tag.

      - name: Install Dependencies
        run: |
          sudo docker build -f packaging/arch.dockerfile -t ce-arch .
          sudo docker run -it -d --name ce-arch-test ce-arch
          sudo docker exec ce-arch-test chmod +x /app/github-scripts/arch.sh

      - id: get_version
        uses: battila7/get-version-action@v2

      - name: Package
        run: |
          sudo docker exec ce-arch-test /app/github-scripts/arch.sh package ${{ steps.get_version.outputs.version }}
          sudo docker cp ce-arch-test:/app/github-scripts/pkg .

      - name: Clean Up
        run: |
          sudo docker stop ce-arch-test
          sudo docker rm ce-arch-test -f
          sudo docker rmi ce-arch -f

      - uses: actions/upload-artifact@v2
        with:
          name: arch-artifact
          path: pkg/

  Windows:
    runs-on: windows-latest
    env:
      GLEW_PATH: C:\lib\glew-2.2.0\bin
      SDL2DIR: C:\lib\SDL2-2.0.16
      GLM_ROOT_DIR: C:\lib\glm
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v2-beta # use either @v2-beta or @master. Eventually there will be a @v2 tag.

      - run: choco install wget unzip 7zip -y
      - name: Install Dependencies
        env:
          GLEW_DOWNLOAD: https://github.com/nigels-com/glew/releases/download/glew-2.2.0/glew-2.2.0-win32.zip
          GLM_DOWNLOAD: https://github.com/g-truc/glm/releases/download/0.9.9.8/glm-0.9.9.8.zip
          SDL2_DOWNLOAD: https://www.libsdl.org/release/SDL2-devel-2.0.16-VC.zip
        run: |
          mkdir c:/lib
          wget -O glew-dev-win.zip $env:GLEW_DOWNLOAD
          wget -O sdl2-dev-win.zip $env:SDL2_DOWNLOAD
          wget -O glm-dev-win.zip $env:GLM_DOWNLOAD

          unzip glew-dev-win.zip -d c:\lib
          unzip sdl2-dev-win.zip -d c:\lib
          unzip glm-dev-win.zip -d c:\lib

      - name: Configure
        run: |
          $env:Path += ";$env:GLEW_PATH"

          echo $env:PATH

          github-scripts\windows.bat configure

      - name: Build
        run: |
          github-scripts\windows.bat build

      - name: Package
        run: |
          github-scripts\windows.bat package

      - uses: actions/upload-artifact@v2
        with:
          name: windows-artifact
          path: pkg/

  Release:
    runs-on: ubuntu-latest
    needs: [Debian, Arch, Windows]
    steps:

    # ----------------
    # Get Artifacts
    # ----------------
      - uses: actions/download-artifact@v2
        with:
          name: debian-artifact

      - uses: actions/download-artifact@v2
        with:
          name: arch-artifact

      - uses: actions/download-artifact@v2
        with:
          name: windows-artifact

    # ----------------
    # Get Version
    # ----------------

      - id: get_version
        uses: battila7/get-version-action@v2


    # ----------------
    # Create Release
    # ----------------

      - name: release
        uses: actions/create-release@v1
        id: create_release
        continue-on-error: true
        with:
          draft: true
          prerelease: false
          release_name: Cinnabar ${{ steps.get_version.outputs.version }}
          tag_name: ${{ steps.get_version.outputs.version }}
          body_path: ${{ env.GITHUB_WORKSPACE }}CHANGELOG.md
        env:
          GITHUB_TOKEN: ${{ github.token }}

    # ----------------
    # Add Artifacts
    # ----------------

      # Debian

      - name: libcinnabar-core.deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./libcinnabar-core.deb
          asset_name: libcinnabar-core.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: libcinnabar-core-dev.deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./libcinnabar-core-dev.deb
          asset_name: libcinnabar-core-dev.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: libcinnabar-core-doc.deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./libcinnabar-core-doc.deb
          asset_name: libcinnabar-core-doc.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: libcinnabar-render.deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./libcinnabar-render.deb
          asset_name: libcinnabar-render.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: libcinnabar-render-dev.deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./libcinnabar-render-dev.deb
          asset_name: libcinnabar-render-dev.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: libcinnabar-render-doc.deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./libcinnabar-render-doc.deb
          asset_name: libcinnabar-render-doc.deb
          asset_content_type: application/vnd.debian.binary-package


      # Arch Linux

      - name: cinnabar-core.pkg.tar.zst
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cinnabar-core.pkg.tar.zst
          asset_name: cinnabar-core.pkg.tar.zst
          asset_content_type: application/vnd.debian.binary-package

      - name: cinnabar-render.pkg.tar.zst
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cinnabar-render.pkg.tar.zst
          asset_name: cinnabar-render.pkg.tar.zst
          asset_content_type: application/vnd.debian.binary-package


      # Windows

      - name: cinnabar-core.dll
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cinnabar-core.dll
          asset_name: cinnabar-core.dll
          asset_content_type: application/x-msdownload

      - name: cinnabar-core-dev-win.zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cinnabar-core-dev-win.zip
          asset_name: cinnabar-core-dev-win.zip
          asset_content_type: application/zip

      - name: cinnabar-render.dll
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cinnabar-render.dll
          asset_name: cinnabar-render.dll
          asset_content_type: application/x-msdownload

      - name: cinnabar-render-dev-win.zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cinnabar-render-dev-win.zip
          asset_name: cinnabar-render-dev-win.zip
          asset_content_type: application/zip
