name: Continuous Delivery
on:
  push:
    tags: ["*"]
jobs:
  Debian:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v2-beta # use either @v2-beta or @master. Eventually there will be a @v2 tag.

      - name: Who am I?
        run: whoami

      - name: Setup Makedeb
        run: |
          wget -qO - 'https://proget.hunterwittenborn.com/debian-feeds/makedeb.pub' | \
          gpg --dearmor | \
          sudo tee /usr/share/keyrings/makedeb-archive-keyring.gpg &> /dev/null
          echo 'deb [signed-by=/usr/share/keyrings/makedeb-archive-keyring.gpg arch=all] https://proget.hunterwittenborn.com/ makedeb main' | \
          sudo tee /etc/apt/sources.list.d/makedeb.list

      - name: Install Dependencies
        run: |
          sudo apt update -y
          sudo apt upgrade -y
          sudo apt install build-essential cmake libglfw3-dev libglew-dev libglm-dev makedeb doxygen -y
          chmod +x github-scripts/debian.sh

      - id: get_version
        uses: battila7/get-version-action@v2

      - name: Package
        run: |
          github-scripts/debian.sh package ${{ steps.get_version.outputs.version }}

      - uses: actions/upload-artifact@v2
        with:
          name: debian-artifact
          path: github-scripts/pkg/

  Arch:
    runs-on: ubuntu-latest
    steps:
      - name: Who am I?
        run: whoami

      - name: Checkout Branch
        uses: actions/checkout@v2-beta # use either @v2-beta or @master. Eventually there will be a @v2 tag.

      - name: Install Dependencies
        run: |
          sudo docker build -f packaging/arch.dockerfile -t ce-arch .
          sudo docker run -it -d --name ce-arch-test -v "$(pwd)":/app:rw ce-arch
          #sudo docker exec ce-arch-test pacman -Syu --noconfirm && pacman -S base-devel cmake sdl2 glew glm doxygen --noconfirm --needed

      - name: Create User
        run: |
          sudo docker exec ce-arch-test useradd ce
          sudo docker exec ce-arch-test chown ce:ce /app -R
          sudo docker exec ce-arch-test chmod 7777 /app -R

      - name: Set Perms
        run: |
          sudo docker exec ce-arch-test chmod +x ./github-scripts/arch.sh

      - name: (Docker) Who am I?
        run: sudo docker exec ce-arch-test whoami

      - id: get_version
        uses: battila7/get-version-action@v2

      - name: Package
        run: |
          sudo docker exec ce-arch-test su ce ./github-scripts/arch.sh package ${{ steps.get_version.outputs.version }}

      - name: Clean Up
        run: |
          sudo docker stop ce-arch-test
          sudo docker rm ce-arch-test -f
          sudo docker rmi ce-arch -f

      - uses: actions/upload-artifact@v2
        with:
          name: arch-artifact
          path: github-scripts/pkg/

  Windows:
    runs-on: windows-latest
    env:
      GLEW_PATH: C:\lib\glew-2.2.0\bin
      GLM_ROOT_DIR: C:\lib\glm
      GLFW_ROOT: C:\lib\glfw-3.3.4
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v2-beta # use either @v2-beta or @master. Eventually there will be a @v2 tag.

      - run: choco install wget unzip 7zip -y
      - name: Install Dependencies
        env:
          GLEW_DOWNLOAD: https://github.com/nigels-com/glew/releases/download/glew-2.2.0/glew-2.2.0-win32.zip
          GLM_DOWNLOAD: https://github.com/g-truc/glm/releases/download/0.9.9.8/glm-0.9.9.8.zip
          GLFW_DOWNLOAD: https://github.com/glfw/glfw/releases/download/3.3.4/glfw-3.3.4.zip
        run: |
          mkdir c:/lib
          wget -O glew.zip $env:GLEW_DOWNLOAD
          wget -O glfw3.zip $env:GLFW_DOWNLOAD
          wget -O glm.zip $env:GLM_DOWNLOAD

          unzip glew.zip -d c:\lib
          unzip glfw3.zip -d c:\lib
          unzip glm.zip -d c:\lib

      - name: Configure
        run: |
          $env:Path += ";$env:GLEW_PATH"

          echo $env:PATH

          github-scripts\windows.bat configure

      - name: Build
        run: |
          github-scripts\windows.bat build

      - name: Package
        run: |
          github-scripts\windows.bat package

      - uses: actions/upload-artifact@v2
        with:
          name: windows-artifact
          path: pkg/

  Release:
    runs-on: ubuntu-latest
    needs: [Debian, Arch, Windows]
    steps:
      # ----------------
      # Get Artifacts
      # ----------------
      - uses: actions/download-artifact@v2
        with:
          name: debian-artifact

      - uses: actions/download-artifact@v2
        with:
          name: arch-artifact

      - uses: actions/download-artifact@v2
        with:
          name: windows-artifact

      # ----------------
      # Get Version
      # ----------------

      - id: get_version
        uses: battila7/get-version-action@v2

      # ----------------
      # Create Release
      # ----------------

      - name: create release
        uses: softprops/action-gh-release@v1
        with:
          body_path: ${{ env.GITHUB_WORKSPACE }}CHANGELOG.md
          draft: true
          prerelease: false
          files: ./*
          name: Cinnabar ${{ steps.get_version.outputs.version }}
          tag_name: ${{ steps.get_version.outputs.version }}
          fail_on_unmatched_files: false
          repository: ${{ github.repository }}