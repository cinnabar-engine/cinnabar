name: Continuous Delivery
on:
  push:
    tags:
      - "*"
    branches:
      - release
  workflow_dispatch:
jobs:
  Debian:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v2-beta # use either @v2-beta or @master. Eventually there will be a @v2 tag.

      - name: Install Dependencies
        run: |
          sudo apt update -y
          sudo apt upgrade -y
          sudo apt install build-essential cmake libsdl2-dev libglew-dev libglm-dev libassimp-dev -y

      - name: Configure
        run: |
          tests/debian.sh configure
      - name: Build
        run: |
          tests/debian.sh build

      - name: Package
        run: |
          tests/debian.sh package

      - uses: actions/upload-artifact@v2
        with:
          name: debian-artifact
          path: pkg/

  Arch:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v2-beta # use either @v2-beta or @master. Eventually there will be a @v2 tag.

      - name: Install Dependencies
        run: |
          sudo docker build -f arch.dockerfile -t ce-arch .
          sudo docker run -it -d --name ce-arch-test ce-arch
          sudo docker exec ce-arch-test chmod +x /app/tests/arch.sh

      - name: Configure
        run: |
          sudo docker exec ce-arch-test /app/tests/arch.sh configure

      - name: Build
        run: |
          sudo docker exec ce-arch-test /app/tests/arch.sh build

      - name: Package
        run: |
          sudo docker exec ce-arch-test /app/tests/arch.sh package
          sudo docker cp ce-arch-test:/app/pkg .

      - name: Clean Up
        run: |
          sudo docker stop ce-arch-test
          sudo docker rm ce-arch-test -f
          sudo docker rmi ce-arch -f

      - uses: actions/upload-artifact@v2
        with:
          name: arch-artifact
          path: pkg/

  Windows:
    runs-on: windows-latest
    env:
      GLEW_PATH: C:\lib\glew-2.2.0\bin
      SDL2DIR: C:\lib\SDL2-2.0.16
      GLM_ROOT_DIR: C:\lib\glm
    steps:
      - name: Checkout Branch
        uses: actions/checkout@v2-beta # use either @v2-beta or @master. Eventually there will be a @v2 tag.

      - run: choco install wget unzip 7zip -y
      - name: Install Dependencies
        env:
          GLEW_DOWNLOAD: https://github.com/nigels-com/glew/releases/download/glew-2.2.0/glew-2.2.0-win32.zip
          GLM_DOWNLOAD: https://github.com/g-truc/glm/releases/download/0.9.9.8/glm-0.9.9.8.zip
          SDL2_DOWNLOAD: https://www.libsdl.org/release/SDL2-devel-2.0.16-VC.zip
        run: |
          mkdir c:/lib
          wget -O glew.zip $env:GLEW_DOWNLOAD
          wget -O sdl2.zip $env:SDL2_DOWNLOAD
          wget -O glm.zip $env:GLM_DOWNLOAD

          unzip glew.zip -d c:\lib
          unzip sdl2.zip -d c:\lib
          unzip glm.zip -d c:\lib

          # vcpkg integrate install
          # vcpkg install sdl2 glew glm
          # # :: Install-Package sdl2 -Force
          # # :: Install-Package glew -Force
          # # # Install-Package glm -Force


      - name: Configure
        run: |
          $env:Path += ";$env:GLEW_PATH"

          echo $env:PATH

          tests\windows.bat configure
      - name: Build
        run: |
          tests\windows.bat build

      - name: Package
        run: |
          tests\windows.bat package

      - uses: actions/upload-artifact@v2
        with:
          name: windows-artifact
          path: pkg/


  Release:
    runs-on: ubuntu-latest
    needs: [Debian, Arch, Windows]
    steps:
      - uses: actions/download-artifact@v2
        with:
          name: debian-artifact

      - uses: actions/download-artifact@v2
        with:
          name: arch-artifact

      - uses: actions/download-artifact@v2
        with:
          name: windows-artifact

      - name: release
        uses: actions/create-release@v1
        id: create_release
        with:
          draft: false
          prerelease: false
          release_name: Cinnabar ${{ github.ref }}
          tag_name: ${{ github.ref }}
          body: hello world
        env:
          GITHUB_TOKEN: ${{ github.token }}

      - name: libcinnabar-core.deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./libcinnabar-core.deb
          asset_name: libcinnabar-core.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: libcinnabar-core-dev.deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./libcinnabar-core-dev.deb
          asset_name: libcinnabar-core-dev.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: libcinnabar-render.deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./libcinnabar-render.deb
          asset_name: libcinnabar-render.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: libcinnabar-render-dev.deb
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./libcinnabar-render-dev.deb
          asset_name: libcinnabar-render-dev.deb
          asset_content_type: application/vnd.debian.binary-package

      - name: cinnabar-core.pkg.tar.zst
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cinnabar-core.pkg.tar.zst
          asset_name: cinnabar-core.pkg.tar.zst
          asset_content_type: application/vnd.debian.binary-package

      - name: cinnabar-render.pkg.tar.zst
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cinnabar-render.pkg.tar.zst
          asset_name: cinnabar-render.pkg.tar.zst
          asset_content_type: application/vnd.debian.binary-package

      - name: cinnabar-core.dll
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cinnabar-core.dll
          asset_name: cinnabar-core.dll
          asset_content_type:  application/x-msdownload

      - name: cinnabar-core.zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cinnabar-core.zip
          asset_name: cinnabar-core.zip
          asset_content_type:  application/zip

      - name: cinnabar-render.dll
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cinnabar-render.dll
          asset_name: cinnabar-corenderre.dll
          asset_content_type:  application/x-msdownload

      - name: cinnabar-render.zip
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./cinnabar-render.zip
          asset_name: cinnabar-render.zip
          asset_content_type:  application/zip
