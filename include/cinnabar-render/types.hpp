#pragma once

#include <glm/glm.hpp>

namespace ce {
	typedef glm::uint32 BufferBit;
	extern const BufferBit
		COLOR_BUFFER_BIT,
		DEPTH_BUFFER_BIT,
		STENCIL_BUFFER_BIT;

	typedef glm::uint32 DepthFunc;
	extern const DepthFunc
		DEPTH_NEVER,
		DEPTH_LESS,
		DEPTH_EQUAL,
		DEPTH_LEQUAL,
		DEPTH_GREATER,
		DEPTH_NOTEQUAL,
		DEPTH_GEQUAL,
		DEPTH_ALWAYS;

	typedef glm::uint32 RenderOption;
	
		/*GL_BLEND,
		GL_CLIP_DISTANCE?,
		GL_CULL_FACE, // TODO: create cull settings function
		GL_DEBUG_OUTPUT,
		GL_DEBUG_OUTPUT_SYNCHRONOUS // TODO: glDebugMessageCallback
		GL_DEPTH_CLAMP // TODO: glDepthRange
		GL_DEPTH_TEST // TODO: glDepthRange
		GL_DITHER
		GL_FRAMEBUFFER_SRGB
		GL_LINE_SMOOTH // TODO: glLineWidth
		GL_MULTISAMPLE // TODO: glSampleCoverage
		GL_POLYGON_OFFSET_FILL // TODO: glPolygonOffset
		GL_POLYGON_OFFSET_LINE // TODO: glPolygonOffset
		GL_POLYGON_OFFSET_POINT // TODO: glPolygonOffset
		GL_POLYGON_SMOOTH
		GL_PRIMITIVE_RESTART // TODO: glPrimitiveRestartIndex
		GL_PRIMITIVE_RESTART_FIXED_INDEX
		GL_RASTERIZER_DISCARD // TODO: glClearBufferData glClearBufferSubData glClearTexImage glClearTexSubImage
		GL_SAMPLE_ALPHA_TO_COVERAGE
		GL_SAMPLE_ALPHA_TO_ONE // TODO: glSampleCoverage
		GL_SAMPLE_COVERAGE // TODO: glMinSampleShading
		GL_SAMPLE_SHADING // TODO: glMinSampleShading
		GL_SAMPLE_MASK // TODO: glSampleMaski
		GL_SCISSOR_TEST
		GL_STENCIL_TEST // TODO: glStencilFunc glStencilOp
		GL_PROGRAM_POINT_SIZE*/

	typedef glm::uint32 Datatype;
	extern const Datatype // TODO: get all types
		TYPE_BYTE,
		TYPE_UNSIGNED_BYTE,
		TYPE_SHORT,
		TYPE_UNSIGNED_SHORT,
		TYPE_INT,
		TYPE_UNSIGNED_INT,
		
		TYPE_HALF_FLOAT,
		TYPE_FLOAT,
		TYPE_DOUBLE,

		TYPE_FIXED,

		TYPE_INT_2_10_10_10_REV,
		TYPE_UNSIGNED_INT_10F_11F_11F_REV,

		TYPE_UNSIGNED_BYTE_3_3_2,
		TYPE_UNSIGNED_BYTE_2_3_3_REV,
		TYPE_UNSIGNED_SHORT_5_6_5,
		TYPE_UNSIGNED_SHORT_5_6_5_REV,
		TYPE_UNSIGNED_SHORT_4_4_4_4,
		TYPE_UNSIGNED_SHORT_4_4_4_4_REV,
		TYPE_UNSIGNED_SHORT_5_5_5_1,
		TYPE_UNSIGNED_SHORT_1_5_5_5_REV ,
		TYPE_UNSIGNED_INT_8_8_8_8,
		TYPE_UNSIGNED_INT_8_8_8_8_REV,
		TYPE_UNSIGNED_INT_10_10_10_2,
		TYPE_UNSIGNED_INT_2_10_10_10_REV;

	typedef glm::uint32 TextureTarget;
	extern const TextureTarget
		TARGET_TEXTURE_2D,
		TARGET_PROXY_TEXTURE_2D,
		TARGET_TEXTURE_1D_ARRAY,
		TARGET_PROXY_TEXTURE_1D_ARRAY,
		TARGET_TEXTURE_RECTANGLE,
		TARGET_PROXY_TEXTURE_RECTANGLE,
		TARGET_TEXTURE_CUBE_MAP_POSITIVE_X,
		TARGET_TEXTURE_CUBE_MAP_NEGATIVE_X,
		TARGET_TEXTURE_CUBE_MAP_POSITIVE_Y,
		TARGET_TEXTURE_CUBE_MAP_NEGATIVE_Y,
		TARGET_TEXTURE_CUBE_MAP_POSITIVE_Z,
		TARGET_TEXTURE_CUBE_MAP_NEGATIVE_Z,
		TARGET_PROXY_TEXTURE_CUBE_MAP;

	typedef glm::uint32 ColorSpace;
	extern const ColorSpace
		COLORSPACE_RED,
		COLORSPACE_RG,
		COLORSPACE_RGB,
		COLORSPACE_BGR,
		COLORSPACE_RGBA,
		COLORSPACE_BGRA,
		COLORSPACE_RED_INTEGER,
		COLORSPACE_RG_INTEGER,
		COLORSPACE_RGB_INTEGER,
		COLORSPACE_BGR_INTEGER,
		COLORSPACE_RGBA_INTEGER,
		COLORSPACE_BGRA_INTEGER,
		COLORSPACE_STENCIL_INDEX,
		COLORSPACE_DEPTH_COMPONENT,
		COLORSPACE_DEPTH_STENCIL;

	typedef glm::uint32 MeshFormat;
	extern const MeshFormat
		MESHFORMAT_POINTS,
		MESHFORMAT_LINE_STRIP,
		MESHFORMAT_LINE_LOOP,
		MESHFORMAT_LINES,
		MESHFORMAT_LINE_STRIP_ADJACENCY,
		MESHFORMAT_LINES_ADJACENCY,
		MESHFORMAT_TRIANGLE_STRIP,
		MESHFORMAT_TRIANGLE_FAN,
		MESHFORMAT_TRIANGLES,
		MESHFORMAT_TRIANGLE_STRIP_ADJACENCY,
		MESHFORMAT_TRIANGLES_ADJACENCY,
		MESHFORMAT_PATCHES;
}